
{test "match macro, simple values"

    {assert
        {match 2
            3
                "therr"
        } == null
        "no match"
    }

    {assert
        {match 2
            2
                "two"
        } == "two"
        "2 to 2"
    }

    {assert
        {match 3
            2
                "two"
            3
                "three"
            5
                "five"
        } == "three"
        "3 to 2 3 5"
    }

    {assert
        {match "asd"
            "asd"
                "qwe"
        } == "qwe"
        "'asd'"
    }

    {assert
        {match "asd"
            "qwe"
                "qwe"
            _
                "any"
            "asd"
                "asd"
        } == "any"
        "any"
    }
}

{test "match lists"
    {assert
        {match []
            []
                "empty"
        } == "empty"
        "empty list"
    }

    {assert
        {match [2 3]
            []
                "empty"
            [2 3]
                "2 3"
        } == "2 3"
        "[2 3]"
    }

    {assert
        {match [2 3]
            []
                "empty"
            [_]
                "one"
            [_ _]
                "two"
            [_ _ _]
                "three"
        } == "two"
        "[2 3] to [_ _]"
    }
}

{test "match or"
    {assert
        {match 7
            2 | 3
                "two or three"
            5 | 7
                "five or seven"
            11 | 13
                "eleven or thirteen"
        } == "five or seven"
        "7 to 5 | 7"
    }
}

{test "match type"
    {class Point []
        {fun __init__ [self x y]
            self.x = x
            self.y = y
        }
        {fun __str__ [self]
            {return "Point(" + {str self.x} + ", " + {str self.y} + ")"}
        }
    }

    {assert
        {match "asd"
            _:str
                "string"
            _:Point
                "Point object"
        } == "string"
        "_:str"
    }

    {assert
        {match {Point 2 3}
            _:str
                "string"
            _:Point
                "Point object"
            _:int
                "int"
        } == "Point object"
        "Point object"
    }
}

{test "match complex"

    {assert
        {match [2 3 5]
            [2 3]
                "2 3"
            [_ 3|5 _]
                "_ 3|5 _"
        } == "_ 3|5 _"
        "_ 3|5 _"
    }
}

{test "match self truthy"

    {assert
        {match true
            $
                "self"
            _
                "other"
        } == "self"
        "true"
    }

    {assert
        {match false
            $
                "self"
            _
                "other"
        } == "other"
        "false"
    }

    {assert
        {match []
            $
                "self"
            _
                "other"
        } == "other"
        "[]"
    }

    {assert
        {match [null]
            $
                "self"
            _
                "other"
        } == "self"
        "[null]"
    }
}

{test "match any binop"

    {assert
        {match 0
            2 > 3
                "2 > 3"
            2 < 3
                "2 < 3"
            _
                "other"
        } == "2 < 3"
        "2 < 3"
    }

    {assert
        {match 2
            $ > 3
                "$ > 3"
            $ < 3
                "$ < 3"
            _
                "other"
        } == "$ < 3"
        "$ < 3"
    }
}

{test "match and"

    {assert
        {match 2
            _:str & $ < 3
                "str < 3"
            _:int & $ < 3
                "int < 3"
            _
                "other"
        } == "int < 3"
        "int < 3"
    }

}

{test "match complex"
    {class Point []
        {fun __init__ [self x y]
            self.x = x
            self.y = y
        }
        {fun __str__ [self]
            {return "Point(" + {str self.x} + ", " + {str self.y} + ")"}
        }
    }
    
    {assert
        {match {Point 2 3}
            _:str & $ < 3
                "str < 3"
            _:Point & $.x > 3
                "$.x > 3"
            _:Point & $.x < 3
                "$.x < 3"
            _
                "other"
        } == "$.x < 3"
        "$.x < 3"
    }
    
    m = {match [2 {Point 2 3} "asd"]
        _:int & $ < 3
            "int < 3"
        [_  _:Point & $.x > 3  _]
            "$.x > 3"
        [_  _:Point & $.x < 3  _]
            "$.x < 3"
        _
            "other"
    }
    m | print
    {assert m == "$.x < 3" "$.x < 3"}
}

{test "match short form"
    {assert {match 2 2} "2 2"}
    {assert not \ {match 2 3} "2 3"}
    {assert {match [2 3] [_  $ > 2 & $ < 5]} "[2 3]"}
    {assert not \ {match [2 5] [_  $ > 2 & $ < 5]} "[2 5]"}
}

# {test "match regular"

#     m = {match [2 3 5]
#         {$r 2*(0..3) 3 $rest}
#             "two"
#         {$r (0..3)'2 3 $rest}

#         {$r $some'2 3 $rest}

#         {$r $some'2 3 $rest}

#         {$r 3*(2 | 3 | some*5) maybe*3 some*5 a=(any*7 | some*(2 3 5))}

#             "three"
#         5
#             "five"
#     }

# }